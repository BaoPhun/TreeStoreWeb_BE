// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using TreeStore.Models.Entities;

namespace TreeStore.Models.Entities
{
    public partial class TreeStoreDBContext
    {
        private ITreeStoreDBContextProcedures _procedures;

        public virtual ITreeStoreDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new TreeStoreDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ITreeStoreDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetDetailProductOrderSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetListOrderByCustomerIdSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetListOrderSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetListProductSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetReviewInfoWithCustomerResult>().HasNoKey().ToView(null);
        }
    }

    public partial class TreeStoreDBContextProcedures : ITreeStoreDBContextProcedures
    {
        private readonly TreeStoreDBContext _context;

        public TreeStoreDBContextProcedures(TreeStoreDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetDetailProductOrderSPResult>> GetDetailProductOrderSPAsync(int? OrderId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderId",
                    Value = OrderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDetailProductOrderSPResult>("EXEC @returnValue = [dbo].[GetDetailProductOrderSP] @OrderId = @OrderId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetListOrderByCustomerIdSPResult>> GetListOrderByCustomerIdSPAsync(int? CustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetListOrderByCustomerIdSPResult>("EXEC @returnValue = [dbo].[GetListOrderByCustomerIdSP] @CustomerId = @CustomerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetListOrderSPResult>> GetListOrderSPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetListOrderSPResult>("EXEC @returnValue = [dbo].[GetListOrderSP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetListProductSPResult>> GetListProductSPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetListProductSPResult>("EXEC @returnValue = [dbo].[GetListProductSP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReviewInfoWithCustomerResult>> GetReviewInfoWithCustomerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReviewInfoWithCustomerResult>("EXEC @returnValue = [dbo].[GetReviewInfoWithCustomer]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
